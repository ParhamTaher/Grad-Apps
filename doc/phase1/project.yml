swagger: '2.0'
info:
  description: Ticketing System for UofT Computer Science Grad School Application
  version: 0.0.0
  title: Grad Application Ticketing System
host: 'localhost:3000'
basePath: /
schemes:
  - http
paths:
  /budget:
    post:
      tags:
        - budget
      summary: Add new budget information
      description: ''
      operationId: addBudget
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: New budget to be added
          required: true
          schema:
            $ref: '#/definitions/Budget'
      responses:
        '405':
          description: Invalid input
    put:
      tags:
        - budget
      summary: Update an existing budget
      description: ''
      operationId: updateBudget
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: New Budget to be added
          required: true
          schema:
            $ref: '#/definitions/Budget'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Budget not found
        '405':
          description: Validation exception
  /professors:
    get:
      tags:
        - professors
      summary: list of DCS research professors 
      description: ''
      operationId: getAllProfessors
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professors
          in: query
          description: all professors
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Faculty'
  /professors/{professorId}:
    get:
      tags:
        - professors
      summary: Find professor by ID
      description: Returns a professor
      operationId: getProfessorById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: New Budget to be added
          required: true
          schema:
            $ref: '#/definitions/Budget'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Faculty'
        '400':
          description: Invalid ID supplied
        '404':
          description: Professor not found
      security:
        - api_key: []
    post:
      tags:
        - professors
      summary: Add new budget information
      description: ''
      operationId: addBudgetByFSS
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: New budget to be added
          required: false
          schema:
            $ref: '#/definitions/Budget'
      responses:
        '405':
          description: Invalid input
    put:
      tags:
        - professors
      summary: Update an existing budget
      description: ''
      operationId: updateBudgetByFSS
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: New Budget to be added
          required: false
          schema:
            $ref: '#/definitions/Budget'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Budget not found
        '405':
          description: Validation exception
  /professors/{professorId}/tickets:
    get:
      tags:
        - professors
      summary: get all tickets associated with professor
      description: returns all tickets
      operationId: getAllTicketsByProfessorId
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: All tickets
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Professor not found
        '405':
          description: Ticket not found
      security:
        - api_key: []
        
    post:
      tags:
        - professors
      summary: create new ticket
      description: creates a new ticket 
      operationId: createNewTicket
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - name: ticketId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: ticket
          required: false
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        '405':
          description: Invalid input
  /professors/{professorId}/tickets/{ticketId}:
    get:
      tags:
        - professors
      summary: get ticket with ticket id associated with professor
      description: returns all tickets
      operationId: getTicketByProfessorIdAndTicketId
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: All tickets
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Professor not found
        '405':
          description: Ticket not found
      security:
        - api_key: []
    put:
      tags:
        - professors
      summary: Update an existing budget
      description: ''
      operationId: updateTicket
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Ticket to be updated
          required: false
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        '400':
          description: Invalid ticket ID supplied
        '404':
          description: Ticket not found
        '405':
          description: Validation exception
  /professors/{professorId}/tickets/{ticketId}/applicants:
    get:
      tags:
        - professors
      summary: get all applicants with ticket id associated with professor
      description: returns all tickets
      operationId: getAllApplicantsByProfessorIdAndTicketId
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: All Applicants
          required: true
          schema:
            $ref: '#/definitions/Applicant'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Applicant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Professor not found
        '405':
          description: Ticket not found
      security:
        - api_key: []
    put:
      tags:
        - professors
      summary: Update an existing budget
      description: ''
      operationId: updateTicketOfferByFaculty
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: professorId
          in: path
          description: ID of professor to return
          required: true
          type: integer
          format: int64
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Ticket to be updated
          required: false
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        '400':
          description: Invalid ticket ID supplied
        '404':
          description: Ticket not found
        '405':
          description: Validation exception
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  user_auth:
    type: oauth2
    authorizationUrl: 'http://localhost:3000/oauth/dialog'
    flow: implicit
    scopes:
      'write:tickets': change tickets
      'write:budget': change budget
      'read:budget': reading budget
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Ticket:
    type: object
    properties:
      id:
        type: integer
        format: int64
      professorId:
        type: integer
        format: int64
      createDate:
        type: integer
        format: int64
      status:
        type: string
        description: Ticket Status
        enum:
          - initial
          - granted
          - offer-request
          - offer-pending
          - accepted
          - refused
      complete:
        type: boolean
        default: false
    xml:
      name: Ticket
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Faculty:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
      roleid:
        type: integer
        format: int64
      budget:
        type: object
    xml:
      name: Faculty
  Applicant:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
      supportingDocuments:
        type: object
      ticketId:
        type: integer
        format: int64
      offered:
        type: boolean
      budget:
        type: object
    xml:
      name: Faculty
  Budget:
    type: object
    properties:
      id:
        type: integer
        format: int64
      faculty:
        type: object
      
    xml:
      name: Budget
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
